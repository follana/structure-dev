justify-content

flex-start : Les éléments s'alignent au côté gauche du conteneur.
flex-end : Les éléments s'alignent au côté droit du conteneur.
center : Les éléments s'alignent au centre du conteneur.
space-between : Les éléments s'affichent avec un espace égal entre eux.
space-around : Les éléments s'affichent avec un espacement égal à l'entour d'eux.

align-items

flex-start : Les éléments s'alignent au haut du conteneur.
flex-end : Les éléments s'alignent au bas du conteneur.
center : Les éléments s'alignent au centre vertical du conteneur.
baseline : Les éléments s'alignent à la ligne de base du conteneur.
stretch : Les éléments sont étirés pour s'adapter au conteneur.

des éléments individuels est align-self

flex-direction

row : Les éléments sont disposés dans la même direction que le texte.
row-reverse : Les éléments sont disposés dans la direction opposée au texte.
column : Les éléments sont disposés de haut en bas.
column-reverse : Les éléments sont disposés de bas en haut.

flex-wrap

nowrap : Tous les éléments sont tenus sur une seule ligne.
wrap : Les éléments s'enveloppent sur plusieurs lignes au besoin.
wrap-reverse : Les éléments s'enveloppent sur plusieurs lignes dans l'ordre inversé.


Les deux propriétés flex-direction et flex-wrap sont utilisées tellement souvent ensembles que le raccourci flex-flow


align-content 

flex-start : Les lignes sont amassées dans le haut du conteneur.
flex-end: Les lignes sont amassées dans le bas du conteneur.
center : Les lignes sont amassées dans le centre vertical du conteneur.
space-between : Les lignes s'affichent avec un espace égal entre eux.
space-around : Les lignes s'affichent avec un espace égal autour d'eux.
stretch : Les lignes sont étirées pour s'adapter au conteneur.

on peut appliquer la propriété order à des éléments individuels. 
Par défaut, les éléments ont une valeur de 0, mais on peut utiliser cette propriété pour changer la valeur à un entier positif ou négatif.

raccourcis pour intégrer un css à html
link:css


/***********************************************Flexbox ending*****************************************************************/

formulaires:

<form></form> sur HTML
cette balise contient les attributs suivants: action et method.
ex: <form action ="" method="">

les cases internes:
<label for="pseudo">Pseudo</label>
<input type="texte"name=""id="pseudo">
<input type="number">
<textarea name="" id cols="30" rows="10"></textarea>

bouton: 2 méthodes.
<button> envoyer</button>
<input type= "submit" value="envoyer">


/**********************************************grid***************************************************/


grid-colum-start: défini la position de départ d'un élément de la grille sur la colonne (on compte en ligne avant la case)
ajout
grid-colum-end: etale jusqu'au nombre donné
 peuvent être défini en nombre négatif en suivant la même logique de comptage

 span: défini la largeur depuis le début ou la fin ne pas oublier le /
 grid-column: raccourcis comprend 2 valeurs (grid-column: 2 / 4; définira l'élément de la grille à partir de la 2ème ligne verticale de la grille et se terminera à la 4ème ligne de la grille.)

 grid-row-start: grid-row-start fonctionne de façon similaire à grid-column-start mais sur l'axe vertical.
 grid-row: 3/6

 Si taper à la fois grid-column et grid-row est trop long pour vous, il y a encore un raccourci pour cela. grid-area accepte quatre valeurs séparées par des slashes : grid-row-start, grid-column-start, grid-row-end, suivies par grid-column-end.

Un exemple de cela seraitgrid-area: 1 / 1 / 3 / 6;.

Si les éléments de la grille ne sont pas explicitement positionnés avec grid-area, grid-column, grid-row, etc., ils sont automatiquement positionnés selon leur ordre dans le code source. Nous pouvons remplacer ceci en utilisant la propriété order, c'est l'un des avantages de la grille par rapport à la mise en page basée sur une table.

Par défaut, tous les éléments de la grille ont order à 0, mais cela peut être défini sur n'importe quelle valeur positive ou négative, c'est similaire à z-index.

Jusqu'à présent, vous aviez mis votre jardin dans une grille avec cinq colonnes, chacune ayant une largeur de 20%, et cinq lignes, chacune ayant une hauteur de 20%.

Cela a été fait avec les règles grid-template-columns: 20% 20% 20% 20% 20%; et grid-template-rows: 20% 20% 20% 20% 20%; Chaque règle comporte cinq valeurs qui créent cinq colonnes, chacune correspond à 20% de la largeur totale du jardin.

Mais vous pouvez configurer la grille comme vous le souhaitez. Donnez une nouvelle valeur à grid-template-columns pour arroser vos carottes. Vous devez définir la largeur de la 1ère colonne à 50%.

Le fait de spécifier un ensemble de colonnes avec des largeurs identiques peut devenir fastidieux. Heureusement, il y a une fonction repeat pour nous aider.

Par exemple, nous avons défini précédemment cinq colonnes de 20% avec la règle grid-template-columns: 20% 20% 20% 20% 20%;. Ceci peut être simplifié ainsi grid-template-columns: repeat(5, 20%);

A l'aide de grid-template-columns avec la fonction repeat, créez huit colonnes avec chacune une largeur de 12.5%. De cette façon, vous ne sur-arrosez pas votre jardin.


grid-template-columns n'accepte pas seulement les valeurs en pourcentage, mais aussi les unités de longueur comme pixels et ems. Vous pouvez même mélanger différentes unités.

Ici, définissez respectivement trois colonnes à 100px, 3em et 40%. (ne pas mettre de ,)

grid-template est la propriété raccourcie qui combine grid-template-rows et grid-template-columns.
Par exemple, grid-template: 50% 50% / 200px; créera une grille avec 2 lignes de 50% de hauteur chacune et une colonne de 200 pixels de large.


